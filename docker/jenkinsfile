pipeline {
    agent any
    environment {
        registry = "mouhibtrabelsi/devops-spring"
        registryCredential = 'mouhibtrabelsi'
        dockerImage = ''
        dockerlatest = ''
    }
    stages {
        stage('Clone') {
            steps {
               git 'https://github.com/Mouhibb/DevOps-Spring.git'
            }
        }
        stage('Clean'){
                steps{
                   sh 'mvn clean'
                }
        }
        stage('Compile'){
                 steps{
                   sh 'mvn compile'
                 }
        }
        stage('Test'){
            steps{
               sh 'mvn test'
            }
            post {
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
            }
        }

        stage('SonarQube') {
            steps{
                withSonarQubeEnv('SonarQube') {
              sh "mvn clean verify sonar:sonar -Dsonar.projectKey=DevOps-project"
            }
          }
        }

        stage('Package'){
            steps{
               sh 'mvn package'
            }
            post {
                    success {
                        archiveArtifacts 'target/*.jar'
                    }
            }
        }
        stage('Deploy Nexus'){
            steps{
               sh 'mvn deploy -DskipTests'
            }
        }
        stage('Build image'){
            steps{
                script {
                    dockerImage = docker.build registry + ":${env.BUILD_ID}"
                    dockerlatest = docker.build registry + ":latest"
                }
            }
        }
        stage('Push image'){
            steps{
              script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                        dockerlatest.push()
                    }
              }
            }
        }
        stage('Docker Compose'){
            steps{
               sh 'docker compose up -d'
            }
        }
    }
}
